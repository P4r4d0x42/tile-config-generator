// This file was generated by counterfeiter
package fakes

import "sync"

type FakeMetadata struct {
	UsesServiceNetworkStub        func() bool
	usesServiceNetworkMutex       sync.RWMutex
	usesServiceNetworkArgsForCall []struct{}
	usesServiceNetworkReturns     struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetadata) UsesServiceNetwork() bool {
	fake.usesServiceNetworkMutex.Lock()
	fake.usesServiceNetworkArgsForCall = append(fake.usesServiceNetworkArgsForCall, struct{}{})
	fake.recordInvocation("UsesServiceNetwork", []interface{}{})
	fake.usesServiceNetworkMutex.Unlock()
	if fake.UsesServiceNetworkStub != nil {
		return fake.UsesServiceNetworkStub()
	} else {
		return fake.usesServiceNetworkReturns.result1
	}
}

func (fake *FakeMetadata) UsesServiceNetworkCallCount() int {
	fake.usesServiceNetworkMutex.RLock()
	defer fake.usesServiceNetworkMutex.RUnlock()
	return len(fake.usesServiceNetworkArgsForCall)
}

func (fake *FakeMetadata) UsesServiceNetworkReturns(result1 bool) {
	fake.UsesServiceNetworkStub = nil
	fake.usesServiceNetworkReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMetadata) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.usesServiceNetworkMutex.RLock()
	defer fake.usesServiceNetworkMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMetadata) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
