// This file was generated by counterfeiter
package fakes

import "sync"

type FakeJobType struct {
	HasPersistentDiskStub        func() bool
	hasPersistentDiskMutex       sync.RWMutex
	hasPersistentDiskArgsForCall []struct{}
	hasPersistentDiskReturns     struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJobType) HasPersistentDisk() bool {
	fake.hasPersistentDiskMutex.Lock()
	fake.hasPersistentDiskArgsForCall = append(fake.hasPersistentDiskArgsForCall, struct{}{})
	fake.recordInvocation("HasPersistentDisk", []interface{}{})
	fake.hasPersistentDiskMutex.Unlock()
	if fake.HasPersistentDiskStub != nil {
		return fake.HasPersistentDiskStub()
	} else {
		return fake.hasPersistentDiskReturns.result1
	}
}

func (fake *FakeJobType) HasPersistentDiskCallCount() int {
	fake.hasPersistentDiskMutex.RLock()
	defer fake.hasPersistentDiskMutex.RUnlock()
	return len(fake.hasPersistentDiskArgsForCall)
}

func (fake *FakeJobType) HasPersistentDiskReturns(result1 bool) {
	fake.HasPersistentDiskStub = nil
	fake.hasPersistentDiskReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeJobType) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hasPersistentDiskMutex.RLock()
	defer fake.hasPersistentDiskMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeJobType) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
